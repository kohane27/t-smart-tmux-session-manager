#!/usr/bin/env bash

tmux ls &>/dev/null
TMUX_STATUS=$?

get_fzf_prompt() {
    local fzf_prompt
    local fzf_default_prompt='>  '
    if [ $TMUX_STATUS -eq 0 ]; then # tmux is running
        fzf_prompt="$(tmux show -gqv '@t-fzf-prompt')"
    fi
    [ -n "$fzf_prompt" ] && echo "$fzf_prompt" || echo "$fzf_default_prompt"
}

HOME_REPLACER=""                                          # default to a noop
echo "$HOME" | grep -E "^[a-zA-Z0-9\-_/.@]+$" &>/dev/null # chars safe to use in sed
HOME_SED_SAFE=$?
if [ $HOME_SED_SAFE -eq 0 ]; then # $HOME should be safe to use in sed
    HOME_REPLACER="s|^$HOME/|~/|"
fi

TMUXP_PATH="$HOME/.local/bin/tmuxp"
TMUXP_LS="$TMUXP_PATH ls"

HEADER=" ctrl-t: tmuxp / ctrl-g: zoxide / ctrl-d: directory"
PROMPT=$(get_fzf_prompt)
TMUXP_BIND="ctrl-t:change-prompt(tmuxp> )+reload($TMUXP_LS)"
ZOXIDE_BIND="ctrl-g:change-prompt(zoxide> )+reload(zoxide query -l | sed -e \"$HOME_REPLACER\")"
DIR_BIND="ctrl-d:change-prompt(directory> )+reload(cd $HOME && echo $HOME; fd --type d --hidden --absolute-path --color never --exclude .git --exclude node_modules)"

if [ $# -eq 0 ]; then                   # no argument provided
    if [ "$TMUX" = "" ]; then           # not in tmux
        if [ $TMUX_STATUS -eq 0 ]; then # tmux is running
            RESULT=$(
                ($TMUXP_LS && (zoxide query -l | sed -e "$HOME_REPLACER")) | fzf \
                    --bind "$DIR_BIND" \
                    --bind "$TMUXP_BIND" \
                    --bind "$ZOXIDE_BIND" \
                    --header "$HEADER" \
                    --prompt "$PROMPT"
            )
        else # tmux is not running
            RESULT=$(
                (zoxide query -l | sed -e "$HOME_REPLACER") | fzf \
                    --bind "$DIR_BIND" \
                    --header " ctrl-d: directory" \
                    --prompt "$PROMPT"
            )
        fi
    else # in tmux
        RESULT=$(
            ($TMUXP_LS && (zoxide query -l | sed -e "$HOME_REPLACER")) | fzf-tmux \
                --bind "$DIR_BIND" \
                --bind "$TMUXP_BIND" \
                --bind "$ZOXIDE_BIND" \
                --header "$HEADER" \
                --prompt "$PROMPT" \
                -p 60%,50%
        )
    fi
else # argument provided
    zoxide query "$1" &>/dev/null
    ZOXIDE_RESULT_EXIT_CODE=$?
    if [ $ZOXIDE_RESULT_EXIT_CODE -eq 0 ]; then # zoxide result found
        RESULT=$(zoxide query "$1")
    else # no zoxide result found
        ls "$1" &>/dev/null
        LS_EXIT_CODE=$?
        if [ $LS_EXIT_CODE -eq 0 ]; then # directory found
            RESULT=$1
        else # no directory found
            echo "No directory found."
            exit 1
        fi
    fi
fi

if [ "$RESULT" = "" ]; then # no result
    exit 0
fi

if [ $HOME_SED_SAFE -eq 0 ]; then
    RESULT=$(echo "$RESULT" | sed -e "s|^~/|$HOME/|") # get real home path back
fi

zoxide add "$RESULT" &>/dev/null # add to zoxide database

# check if selection is in is tmuxp
WORKSPACE_NAME=$($TMUXP_LS | grep -x "$RESULT")
if [ ! -z "$WORKSPACE_NAME" -a "$WORKSPACE_NAME" != " " ]; then
    $TMUXP_PATH load -d "$WORKSPACE_NAME" >/dev/null 2>&1
    tmux switch-client -t "$WORKSPACE_NAME"
    exit 0
fi

# selection not a tmuxp's workspace
if [ -z "$WORKSPACE_NAME" ]; then
    # notify-send "$WORKSPACE_NAME is empty"
    SESSION=$(tmux list-sessions -F '#S' | grep "^$SESSION_NAME$") # find existing session
    # new session
    FOLDER=$(basename "$RESULT")
    SESSION_NAME=$(echo "$FOLDER" | tr ' ' '_' | tr '.' '_' | tr ':' '_')
    if [ "$SESSION" = "" ]; then                            # session does not exist
        tmux new-session -d -s "$SESSION_NAME" -c "$RESULT" # create session
        tmux switch-client -t "$SESSION_NAME"               # attach to session
    else                                                    # session exists
        tmux switch-client -t "$SESSION"                    # switch to session
    fi
fi
